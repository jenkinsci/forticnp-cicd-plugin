package com.fortinet;

import com.fortinet.forticontainer.*;
import com.fortinet.forticontainer.common.ControllerUtil;
import com.fortinet.forticontainer.dto.AlertDto;
import com.fortinet.forticontainer.dto.ImageDto;
import com.google.gson.Gson;
import hudson.model.Run;
import jenkins.model.RunAction2;

import javax.annotation.CheckForNull;
import java.io.IOException;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VulnerabilityAction implements RunAction2 {

    private transient Run run;
    private String imageName = "";

    private CurrentBuildInfo currentBuildInfo;

    private List<VulnerabilityEntity> vulnerResult;

    private List<ImageDto> imageDtoList;

    private List<AlertDto> alertDtoResult;

    private String getWebHostAddress() {
        UserConfiguration userConfig = UserConfiguration.get();
        return userConfig.getWebHostAddress();
    }
    public String getWebPolicyCicdAddress() {
        final String cicdUri = "/container/policy/CI_CD_integration";
        return getWebHostAddress() + cicdUri;
    }

    public String getWebImageVulnerabilityAddress() {
        final String imageUri = "/container/protection/CI_CD_integration/image_detail?imageId=";
        return getWebHostAddress() + imageUri;
    }

    public Run getRun() {
        return run;
    }

    public String getImageName() {
        return imageName;
    }

    public List<VulnerabilityEntity> getVulnerResult() {
        return vulnerResult;
    }

    public List<ImageDto> getImageDtoList() {
        return imageDtoList;
    }

    public void setImageDtoList(List<ImageDto> imageDtoList) {
        this.imageDtoList = imageDtoList;
    }

    public List<AlertDto> getAlertDtoResult() {
        return alertDtoResult;
    }

    public VulnerabilityAction(CurrentBuildInfo currentBuildInfo) throws IOException {
        this.currentBuildInfo = currentBuildInfo;
    }

    public void getImageVulnerabilityReport(PrintStream ps) throws IOException {
        ps.println("Generating Image vulnerability report");

        UserConfiguration userConfiguration = UserConfiguration.get();
        String controllerHost = ControllerUtil.getControllerHostByUserConfig(userConfiguration, ps);
        if (controllerHost.isEmpty()) {
            return;
        }
        SessionInfo sessionInfo = new SessionInfo(controllerHost, userConfiguration.getCredentialTokenString());

        this.imageDtoList = VulnerabilityServer.getImageDtoList(sessionInfo, currentBuildInfo);
    }

    public Boolean generateVulnerResult(PrintStream ps) throws IOException {

        ps.println("Generating vulnerability result " + currentBuildInfo.toString());

        UserConfiguration userConfiguration = UserConfiguration.get();
        String controllerHost = ControllerUtil.getControllerHostByUserConfig(userConfiguration, ps);
        if (controllerHost.isEmpty()) {
            return false;
        }
        SessionInfo sessionInfo = new SessionInfo(controllerHost, userConfiguration.getCredentialTokenString());

        vulnerResult = VulnerabilityServer.getBuildVulnerability(sessionInfo, currentBuildInfo);
        //System.out.println("found some vulnerability, the size is" + vulnerResult.size());

        if(vulnerResult.size() > 0) {
            return true;
        }
        return false;
    }

    public Boolean getAlertInfo(PrintStream ps) throws IOException {

        UserConfiguration userConfiguration = UserConfiguration.get();
        String controllerHost = ControllerUtil.getControllerHostByUserConfig(userConfiguration, ps);
        if (controllerHost.isEmpty()) {
            return false;
        }
        SessionInfo sessionInfo = new SessionInfo(controllerHost, userConfiguration.getCredentialTokenString());

        ps.println("Generating the alert result");

        alertDtoResult = PolicyAlertServer.getBuildAlertDto(sessionInfo, currentBuildInfo);

        if(alertDtoResult.size() > 0) {
            return true;
        }

        return false;
    }

    public Map<String,Integer> getVulnerSummaryReport(ImageDto imageDto) {
        Map<String,Integer> summaryReportMap = new HashMap<>();
        summaryReportMap.put("CRITICAL",imageDto.getVulnerScoreMap().getOrDefault("CRITICAL",0));
        summaryReportMap.put("MEDIUM", imageDto.getVulnerScoreMap().getOrDefault("MEDIUM",0));
        summaryReportMap.put("HIGH", imageDto.getVulnerScoreMap().getOrDefault("HIGH",0));
        summaryReportMap.put("LOW", imageDto.getVulnerScoreMap().getOrDefault("LOW",0));


        int totalVulnerCount = imageDto.getVulnerScoreMap().getOrDefault("CRITICAL",0) +
                imageDto.getVulnerScoreMap().getOrDefault("MEDIUM",0)+
                imageDto.getVulnerScoreMap().getOrDefault("HIGH",0)+
                imageDto.getVulnerScoreMap().getOrDefault("LOW",0);

        summaryReportMap.put("TOTAL", totalVulnerCount);
        //System.out.println("the response is = " + new Gson().toJson(summaryReportMap));
        return summaryReportMap;
    }

    @Override
    public void onAttached(Run<?, ?> run) {
        this.run = run;
    }

    @Override
    public void onLoad(Run<?, ?> run) {
        this.run = run;
    }

    @CheckForNull
    @Override
    public String getIconFileName() {
        return "document.png";
    }

    @CheckForNull
    @Override
    public String getDisplayName() {
        return "Vulnerabilities";
    }

    @CheckForNull
    @Override
    public String getUrlName() {
        return "vulnerability";
    }
}
