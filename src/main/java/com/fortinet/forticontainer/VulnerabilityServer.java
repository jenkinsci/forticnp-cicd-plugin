package com.fortinet.forticontainer;

import com.fortinet.forticontainer.common.ControllerUtil;
import com.fortinet.forticontainer.dto.ImageDto;
import com.google.gson.reflect.TypeToken;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Type;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.*;
import com.google.gson.Gson;

public class VulnerabilityServer {

    private VulnerabilityServer() {
    }

    private static Gson gson = new Gson();

    public static List<VulnerabilityEntity> getBuildVulnerability(SessionInfo session, CurrentBuildInfo currentBuildInfo) throws IOException {
        String vulnerSearchUrl = session.getControllerHostUrl() + ControllerUtil.URI_JENKINS_FORWARD;
        URL instanceUrl = new URL(vulnerSearchUrl);
        HttpURLConnection conn = (HttpURLConnection) instanceUrl.openConnection();

        JSONObject jsonObject = new JSONObject();
        List<String> resourceList = new ArrayList<>();
        resourceList.add("2");
        List<String> jobIdList = new ArrayList<>();
        jobIdList.add(currentBuildInfo.getJenkinsJobId());

        jsonObject.put("resource", resourceList);
        jsonObject.put("jobId", jobIdList);
        jsonObject.put("skip", 0);
        jsonObject.put("limit", 100);
        //System.out.println("the body of vulner search is ");
        BufferedReader br = null;
        try {
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty(ControllerUtil.HEADER_CONTROLLER_TOKEN, session.getControllerToken());
            conn.setRequestProperty(ControllerUtil.HEADER_URL_PATH, ControllerUtil.URI_VULNERS_SEARCH);
            conn.setRequestProperty(ControllerUtil.HEADER_HTTP_METHOD, "POST");
            conn.getOutputStream().write(jsonObject.toString().getBytes("UTF-8"));

            final InputStream inputStream = conn.getInputStream();
            // int responseCode =  conn.getResponseCode();
            //System.out.println("the response code is " + responseCode);

            br = new BufferedReader(new InputStreamReader(inputStream, Charset.defaultCharset()));
            StringBuilder sb = new StringBuilder();
            String output;
            while ((output = br.readLine()) != null) {
                sb.append(output);
            }
            output = sb.toString();

            JSONObject vulnerJson = JSONObject.fromObject(output);
            //System.out.println("the vulnerJson is " + gson.toJson(vulnerJson));
            JSONArray vulnerabilityEntities = vulnerJson.getJSONArray("datas");
            Type projectListType = new TypeToken<ArrayList<VulnerabilityEntity>>(){}.getType();
            List<VulnerabilityEntity> response = gson.fromJson(String.valueOf(vulnerabilityEntities), projectListType);

            inputStream.close();

            return response;
        } catch (IOException e) {
            throw e;
        } finally {
            if (br != null) {
                br.close();
            }
        }
    }

    public static List<ImageDto> getImageDtoList(SessionInfo session, CurrentBuildInfo currentBuildInfo) throws IOException {
        String vulnerSearchUrl = session.getControllerHostUrl() + ControllerUtil.URI_JENKINS_FORWARD;
        URL instanceUrl = new URL(vulnerSearchUrl);
        HttpURLConnection conn = (HttpURLConnection) instanceUrl.openConnection();

        JSONObject jsonObject = new JSONObject();
        List<String> jobIdList = new ArrayList<>();
        jobIdList.add(currentBuildInfo.getJenkinsJobId());

        jsonObject.put("resource", 2);
        jsonObject.put("jobId", jobIdList);
        jsonObject.put("skip", 0);
        jsonObject.put("limit", 50);
        //System.out.println("the body of vulner search is ");
        BufferedReader br = null;
        try {
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setRequestProperty(ControllerUtil.HEADER_CONTROLLER_TOKEN, session.getControllerToken());
            conn.setRequestProperty(ControllerUtil.HEADER_URL_PATH, ControllerUtil.URI_IMAGES_SEARCH);
            conn.setRequestProperty(ControllerUtil.HEADER_HTTP_METHOD, "POST");
            conn.getOutputStream().write(jsonObject.toString().getBytes("UTF-8"));

            final InputStream inputStream = conn.getInputStream();
            // int responseCode =  conn.getResponseCode();
            //System.out.println("the response code is " + responseCode);

            br = new BufferedReader(new InputStreamReader(inputStream, Charset.defaultCharset()));
            StringBuilder sb = new StringBuilder();
            String output;
            while ((output = br.readLine()) != null) {
                sb.append(output);
            }
            output = sb.toString();

            JSONObject imageDtoJson = JSONObject.fromObject(output);
            JSONArray imageDtoArray = imageDtoJson.getJSONArray("datas");
            Type projectListType = new TypeToken<ArrayList<ImageDto>>(){}.getType();
            List<ImageDto> response = gson.fromJson(String.valueOf(imageDtoArray), projectListType);

            //System.out.println("the image list = " + gson.toJson(response));
            inputStream.close();

            return response;
        } catch (IOException e) {
            throw e;
        } finally {
            if (br != null) {
                br.close();
            }
        }
    }
}
